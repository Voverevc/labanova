#include <stdio.h>

#define MAX_SIZE 100 // Максимальный размер массива

// Прототип функции для вычисления среднего значения
float calculate_even_index_average(int arr[], int size);

int main() {
    int n; // Количество элементов в массиве
    int arr[MAX_SIZE]; // Объявляем массив

    // Вводим количество элементов
    printf("Введите количество элементов массива (макс. %d): ", MAX_SIZE);
    scanf("%d", &n);

    // Проверка на допустимый размер
    if (n <= 0 || n > MAX_SIZE) {
        printf("Ошибка: Количество элементов должно быть в диапазоне от 1 до %d.\n", MAX_SIZE);
        return 1; // Выход из программы с ошибкой
    }

    // Вводим элементы массива
    for (int i = 0; i < n; i++) {
        printf("Введите элемент arr[%d]: ", i);
        scanf("%d", &arr[i]);
    }

    // Вычисляем и выводим среднее значение элементов с четными индексами
    float average = calculate_even_index_average(arr, n);

    // Условие для вывода результата
    if (average != -1) {
        printf("Среднее значение элементов с четными индексами (кроме нулевого): %.2f\n", average);
    } else {
        printf("Нет четных индексов для вычисления среднего.\n");
    }

    return 0;
}

// Функция для вычисления среднего значения элементов с четными индексами
float calculate_even_index_average(int arr[], int size) {
    float sum = 0; // Сумма элементов с четными индексами
    int count = 0; // Счетчик элементов с четными индексами

    // Проход по массиву, начиная со второго элемента (индекс 2)
    for (int i = 2; i < size; i += 2) {
        sum += arr[i]; // Суммируем элементы
        count++; // Увеличиваем счетчик
    }

    // Если есть счетчики, можно рассчитать среднее
    if (count > 0) {
        return sum / count; // Возвращаем среднее значение
    } else {
        return -1; // Значение для определения отсутствия четных индексов
    }
}
